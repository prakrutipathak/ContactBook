{
	"info": {
		"_postman_id": "79ca80e2-fdf6-4779-b46d-011da02cd95d",
		"name": "ContactBookTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34213251"
	},
	"item": [
		{
			"name": "State",
			"item": [
				{
					"name": "GetAllStates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    responseData.data.forEach(item => {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.stateId).to.exist;\r",
									"        pm.expect(item.stateName).to.exist;\r",
									"         pm.expect(item.countryId).to.exist;\r",
									"          pm.expect(item.country).to.exist;\r",
									"    });\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}State/GetAllStates"
					},
					"response": []
				},
				{
					"name": "GetStatesByCountryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    responseData.data.forEach(item => {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.stateId).to.exist;\r",
									"        pm.expect(item.stateName).to.exist;\r",
									"         pm.expect(item.countryId).to.exist;\r",
									"          pm.expect(item.country).to.exist;\r",
									"    });\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}State/GetStatesByCountryId/{{countryId}}"
					},
					"response": []
				},
				{
					"name": "GetStatesByCountryId BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.null;\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}State/GetStatesByCountryId/0"
					},
					"response": []
				}
			]
		},
		{
			"name": "Country",
			"item": [
				{
					"name": "GetAllCountries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    responseData.data.forEach(item => {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.countryId).to.exist;\r",
									"        pm.expect(item.countryName).to.exist;\r",
									"    });\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Country/GetAllCountries"
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.string;\r",
									"     pm.expect(responseData.success).to.have.eq(true);\r",
									"     pm.expect(responseData.message).to.include(\"\");\r",
									"});\r",
									"\r",
									"\r",
									"// Parse the response JSON\r",
									"var userId = pm.response.json();\r",
									" \r",
									"// Extract the 'data' field from the response\r",
									"var dataValue = userId.data;\r",
									" \r",
									"// Store the extracted value in an environment variable\r",
									"pm.environment.set(\"userId\", dataValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique identifier using timestamp and random number\r",
									"\r",
									"var uniquenumber =  Math.floor(Math.random() * 10000);\r",
									" \r",
									"// Construct a unique email address\r",
									"var uniqueId = 'user' + uniquenumber + '@example.com';\r",
									"var uniqueloginId = 'user' + uniquenumber;\r",
									"var uniquefname ='user' + uniquenumber+'f';\r",
									"var uniquelname ='user' + uniquenumber+'l';\r",
									"// Get the current date and time\r",
									"var now = new Date();\r",
									"var month = (\"0\" + (now.getMonth() + 1)).slice(-2); // Months are 0-based, so +1\r",
									"var day = (\"0\" + now.getDate()).slice(-2);\r",
									"var hours = (\"0\" + now.getHours()).slice(-2);\r",
									"var minutes = (\"0\" + now.getMinutes()).slice(-2);\r",
									"var seconds = (\"0\" + now.getSeconds()).slice(-2);\r",
									"\r",
									"// Construct the unique phone number based on the current date and time\r",
									"var uniquephonenumber =month + day + hours + minutes + seconds;\r",
									" \r",
									"// Store the unique email address in the environment variable\r",
									"pm.environment.set('uniqueId', uniqueId);\r",
									"pm.environment.set('uniqueloginId', uniqueloginId);\r",
									"pm.environment.set('uniquefname', uniquefname);\r",
									"pm.environment.set('uniquelname', uniquelname);\r",
									"pm.environment.set('uniquephonenumber', uniquephonenumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 0,\r\n  \"firstName\": \"{{uniquefname}}\",\r\n  \"lastName\": \"{{uniquelname}}\",\r\n  \"loginId\": \"{{uniqueloginId}}\",\r\n  \"email\": \"{{uniqueId}}\",\r\n  \"contactNumber\": \"{{uniquephonenumber}}\",\r\n  \"password\": \"Password@123\",\r\n  \"confirmPassword\": \"Password@123\",\r\n  \"image\": \"\",\r\n  \"imageByte\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Auth/Register"
					},
					"response": []
				},
				{
					"name": "Register PasswordBadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has password character error\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('errors');\r",
									"    pm.expect(responseData.errors).to.have.property('Password');\r",
									"    pm.expect(responseData.errors.Password).to.include(\r",
									"        \"The password must be at least 8 characters long and contain at least 1 uppercase letter, 1 number, and 1 special character.\"\r",
									"    );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 0,\r\n  \"firstName\": \"{{uniquefname}}\",\r\n  \"lastName\": \"{{uniquelname}}\",\r\n  \"loginId\": \"{{uniqueloginId}}\",\r\n  \"email\": \"{{uniqueId}}\",\r\n  \"contactNumber\": \"{{uniquephonenumber}}\",\r\n  \"password\": \"password123\",\r\n  \"confirmPassword\": \"password123\",\r\n  \"image\": \"\",\r\n  \"imageByte\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Auth/Register"
					},
					"response": []
				},
				{
					"name": "Register BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"   \r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.eq(null);\r",
									"     pm.expect(responseData.success).to.have.eq(false);\r",
									"     pm.expect(responseData.message).to.include(\"User already exists.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 0,\r\n  \"firstName\": \"userf\",\r\n  \"lastName\": \"userl\",\r\n  \"loginId\": \"user12\",\r\n  \"email\": \"user12@example.com\",\r\n  \"contactNumber\": \"1234567890\",\r\n  \"password\": \"Password@123\",\r\n  \"confirmPassword\": \"Password@123\",\r\n  \"image\": \"\",\r\n  \"imageByte\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Auth/Register"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{uniqueloginId}}\",\r\n  \"password\": \"Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Auth/Login"
					},
					"response": []
				},
				{
					"name": "Login BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{uniqueloginId}}\",\r\n  \"password\": \"Password@12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Auth/Login"
					},
					"response": []
				},
				{
					"name": "ForgetPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"user12\",\r\n  \"password\": \"Password@123\",\r\n  \"confirmPassword\": \"Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Auth/ForgetPassword"
					},
					"response": []
				},
				{
					"name": "ForgetPassword BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"user11\",\r\n  \"password\": \"Password@123\",\r\n  \"confirmPassword\": \"Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Auth/ForgetPassword"
					},
					"response": []
				},
				{
					"name": "GetUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.data.userId).to.exist;\r",
									"    pm.expect(responseData.data.firstName).to.exist;\r",
									"    pm.expect(responseData.data.lastName).to.exist;\r",
									"    pm.expect(responseData.data.loginId).to.exist;\r",
									"    pm.expect(responseData.data.email).to.exist;\r",
									"    pm.expect(responseData.data.contactNumber).to.exist;\r",
									"    pm.expect(responseData.data.imageByte).to.exist;\r",
									"    pm.expect(responseData.data.image).to.exist;\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Auth/GetUserById/{{userId}}"
					},
					"response": []
				},
				{
					"name": "GetUserById BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    pm.expect(responseData.success).to.be.false;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.message).to.be.a('string');\r",
									"});\r",
									" \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Auth/GetUserById/0"
					},
					"response": []
				},
				{
					"name": "Edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var uniquenumber =  Math.floor(Math.random() * 10000);\r",
									"var generatedfname ='user' + uniquenumber+'f';\r",
									"var generatedlname ='user' + uniquenumber+'l';\r",
									"pm.environment.set('generatedfname', generatedfname);\r",
									"pm.environment.set('generatedlname', generatedlname);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"firstName\": \"{{generatedfname}}\",\r\n  \"lastName\": \"{{generatedlname}}\",\r\n  \"loginId\": \"{{uniqueloginId}}\",\r\n  \"email\": \"{{uniqueId}}\",\r\n  \"contactNumber\": \"{{uniquephonenumber}}\",\r\n  \"image\": \"\",\r\n  \"imageByte\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Auth/Edit"
					},
					"response": []
				}
			]
		},
		{
			"name": "Contact",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique identifier using timestamp and random number\r",
									"var uniquenumber = Math.floor(Math.random() * 10000);\r",
									"\r",
									"// Construct a unique email address\r",
									"var contactEmailId = 'contact' + uniquenumber + '@example.com';\r",
									"var contactfname = 'contact' + uniquenumber + 'f';\r",
									"var contactlname = 'contact' + uniquenumber + 'l';\r",
									"\r",
									"// Get the current date and time\r",
									"var now = new Date();\r",
									"var month = (\"0\" + (now.getMonth() + 1)).slice(-2); // Months are 0-based, so +1\r",
									"var day = (\"0\" + now.getDate()).slice(-2);\r",
									"var hours = (\"0\" + now.getHours()).slice(-2);\r",
									"var minutes = (\"0\" + now.getMinutes()).slice(-2);\r",
									"var seconds = (\"0\" + now.getSeconds()).slice(-2);\r",
									"\r",
									"// Construct the unique phone number based on the current date and time\r",
									"var contactNumber = month + day + hours + minutes + seconds;\r",
									"\r",
									"// Generate a random address\r",
									"var addresses = [\"123 Elm Street\", \"456 Maple Avenue\", \"789 Oak Road\", \"101 Pine Lane\"];\r",
									"var contactAddress = addresses[Math.floor(Math.random() * addresses.length)];\r",
									"\r",
									"// Generate a random favorite status\r",
									"var contactFavorite = Math.random() > 0.5? true : false; // Randomly true or false\r",
									"\r",
									"// Generate a random gender ('F' or 'M')\r",
									"var contactGender = Math.random() > 0.5 ? \"F\" : \"M\";\r",
									"\r",
									"// Generate a random birthdate within a range\r",
									"var start = new Date(1950, 0, 1); // January 1, 1950\r",
									"var end = new Date(2000, 11, 31); // December 31, 2000\r",
									"var randomDate = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"var contactBirthDate = randomDate.toISOString();\r",
									"\r",
									"//countryId\r",
									"// Generate a random countryId between 1 and 6\r",
									"var countryId = Math.floor(Math.random() * 6) + 1;\r",
									"\r",
									"// Determine the range of stateIds based on the countryId\r",
									"var stateIdStart, stateIdEnd;\r",
									"\r",
									"if (countryId === 1) {\r",
									"    stateIdStart = 1;\r",
									"    stateIdEnd = 5;\r",
									"} else if (countryId === 2) {\r",
									"    stateIdStart = 6;\r",
									"    stateIdEnd = 10;\r",
									"} else if (countryId === 3) {\r",
									"    stateIdStart = 11;\r",
									"    stateIdEnd = 15;\r",
									"} else if (countryId === 4) {\r",
									"    stateIdStart = 16;\r",
									"    stateIdEnd = 20;\r",
									"} else if (countryId === 5) {\r",
									"    stateIdStart = 21;\r",
									"    stateIdEnd = 25;\r",
									"} else if (countryId === 6) {\r",
									"    stateIdStart = 26;\r",
									"    stateIdEnd = 30;\r",
									"}\r",
									"\r",
									"// Generate a random stateId within the determined range\r",
									"var stateId = Math.floor(Math.random() * (stateIdEnd - stateIdStart + 1)) + stateIdStart;\r",
									"\r",
									"// Set the values as environment variables in Postman\r",
									"pm.environment.set('countryId', countryId);\r",
									"pm.environment.set('stateId', stateId);\r",
									"\r",
									"\r",
									"// Store the generated values in environment variables\r",
									"pm.environment.set('contactEmailId', contactEmailId);\r",
									"pm.environment.set('contactfname', contactfname);\r",
									"pm.environment.set('contactlname', contactlname);\r",
									"pm.environment.set('contactNumber', contactNumber);\r",
									"pm.environment.set('contactAddress', contactAddress);\r",
									"pm.environment.set('contactFavorite', contactFavorite);\r",
									"pm.environment.set('contactGender', contactGender);\r",
									"pm.environment.set('contactBirthDate', contactBirthDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.string;\r",
									"     pm.expect(responseData.success).to.have.eq(true);\r",
									"     pm.expect(responseData.message).to.include(\"\");\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var contactId = pm.response.json();\r",
									" \r",
									"// Extract the 'data' field from the response\r",
									"var dataValue = contactId.data;\r",
									" \r",
									"// Store the extracted value in an environment variable\r",
									"pm.environment.set(\"contactId\", dataValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{contactfname}}\",\r\n  \"lastName\": \"{{contactlname}}\",\r\n  \"image\": \"\",\r\n  \"email\": \"{{contactEmailId}}\",\r\n  \"contactNumber\": \"{{contactNumber}}\",\r\n  \"address\": \"{{contactAddress}}\",\r\n  \"gender\": \"{{contactGender}}\",\r\n  \"favourite\": {{contactFavorite}},\r\n  \"countryId\": {{countryId}},\r\n  \"stateId\": {{stateId}},\r\n  \"imageByte\": \"\",\r\n  \"birthDate\": \"{{contactBirthDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Contact/Create"
					},
					"response": []
				},
				{
					"name": "Create BadRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.null;\r",
									"     pm.expect(responseData.success).to.have.eq(false);\r",
									"     pm.expect(responseData.message).to.include(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{contactfname}}\",\r\n  \"lastName\": \"{{contactlname}}\",\r\n  \"image\": \"\",\r\n  \"email\": \"{{contactEmailId}}\",\r\n  \"contactNumber\": \"{{contactNumber}}\",\r\n  \"address\": \"{{contactAddress}}\",\r\n  \"gender\": \"{{contactGender}}\",\r\n  \"favourite\": {{contactFavorite}},\r\n  \"countryId\": {{countryId}},\r\n  \"stateId\": {{stateId}},\r\n  \"imageByte\": \"\",\r\n  \"birthDate\": \"{{contactBirthDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Contact/Create"
					},
					"response": []
				},
				{
					"name": "GetContactById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.data.contactId).to.exist;\r",
									"    pm.expect(responseData.data.firstName).to.exist;\r",
									"    pm.expect(responseData.data.lastName).to.exist;\r",
									"    pm.expect(responseData.data.address).to.exist;\r",
									"    pm.expect(responseData.data.email).to.exist;\r",
									"    pm.expect(responseData.data.contactNumber).to.exist;\r",
									"    pm.expect(responseData.data.imageByte).to.exist;\r",
									"    pm.expect(responseData.data.image).to.exist;\r",
									"     pm.expect(responseData.data.countryId).to.exist;\r",
									"    pm.expect(responseData.data.stateId).to.exist;\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/GetContactById/{{contactId}}"
					},
					"response": []
				},
				{
					"name": "GetContactById BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/GetContactById/0"
					},
					"response": []
				},
				{
					"name": "Edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.string;\r",
									"     pm.expect(responseData.success).to.have.eq(true);\r",
									"     pm.expect(responseData.message).to.include(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contactId\":{{contactId}},\r\n  \"firstName\": \"{{contactfname}}\",\r\n  \"lastName\": \"{{contactlname}}\",\r\n  \"image\": \"\",\r\n  \"email\": \"{{contactEmailId}}\",\r\n  \"contactNumber\": \"{{contactNumber}}\",\r\n  \"address\": \"{{contactAddress}}\",\r\n  \"gender\": \"{{contactGender}}\",\r\n  \"favourite\": {{contactFavorite}},\r\n  \"countryId\": {{countryId}},\r\n  \"stateId\": {{stateId}},\r\n  \"imageByte\": \"\",\r\n  \"birthDate\": \"{{contactBirthDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Contact/Edit"
					},
					"response": []
				},
				{
					"name": "Create Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique identifier using timestamp and random number\r",
									"var uniquenumber = Math.floor(Math.random() * 10000);\r",
									"\r",
									"// Construct a unique email address\r",
									"var contactEmailId = 'contact' + uniquenumber + '@example.com';\r",
									"var contactfname = 'contact' + uniquenumber + 'f';\r",
									"var contactlname = 'contact' + uniquenumber + 'l';\r",
									"\r",
									"// Get the current date and time\r",
									"var now = new Date();\r",
									"var month = (\"0\" + (now.getMonth() + 1)).slice(-2); // Months are 0-based, so +1\r",
									"var day = (\"0\" + now.getDate()).slice(-2);\r",
									"var hours = (\"0\" + now.getHours()).slice(-2);\r",
									"var minutes = (\"0\" + now.getMinutes()).slice(-2);\r",
									"var seconds = (\"0\" + now.getSeconds()).slice(-2);\r",
									"\r",
									"// Construct the unique phone number based on the current date and time\r",
									"var contactNumber = month + day + hours + seconds + minutes;\r",
									"\r",
									"// Generate a random address\r",
									"var addresses = [\"123 Elm Street\", \"456 Maple Avenue\", \"789 Oak Road\", \"101 Pine Lane\"];\r",
									"var contactAddress = addresses[Math.floor(Math.random() * addresses.length)];\r",
									"\r",
									"// Generate a random favorite status\r",
									"var contactFavorite = Math.random() > 0.5? true : false; // Randomly true or false\r",
									"\r",
									"// Generate a random gender ('F' or 'M')\r",
									"var contactGender = Math.random() > 0.5 ? \"F\" : \"M\";\r",
									"\r",
									"// Generate a random birthdate within a range\r",
									"var start = new Date(1950, 0, 1); // January 1, 1950\r",
									"var end = new Date(2000, 11, 31); // December 31, 2000\r",
									"var randomDate = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"var contactBirthDate = randomDate.toISOString();\r",
									"\r",
									"//countryId\r",
									"// Generate a random countryId between 1 and 6\r",
									"var countryId = Math.floor(Math.random() * 6) + 1;\r",
									"\r",
									"// Determine the range of stateIds based on the countryId\r",
									"var stateIdStart, stateIdEnd;\r",
									"\r",
									"if (countryId === 1) {\r",
									"    stateIdStart = 1;\r",
									"    stateIdEnd = 5;\r",
									"} else if (countryId === 2) {\r",
									"    stateIdStart = 6;\r",
									"    stateIdEnd = 10;\r",
									"} else if (countryId === 3) {\r",
									"    stateIdStart = 11;\r",
									"    stateIdEnd = 15;\r",
									"} else if (countryId === 4) {\r",
									"    stateIdStart = 16;\r",
									"    stateIdEnd = 20;\r",
									"} else if (countryId === 5) {\r",
									"    stateIdStart = 21;\r",
									"    stateIdEnd = 25;\r",
									"} else if (countryId === 6) {\r",
									"    stateIdStart = 26;\r",
									"    stateIdEnd = 30;\r",
									"}\r",
									"\r",
									"// Generate a random stateId within the determined range\r",
									"var stateId = Math.floor(Math.random() * (stateIdEnd - stateIdStart + 1)) + stateIdStart;\r",
									"\r",
									"// Set the values as environment variables in Postman\r",
									"pm.environment.set('countryId', countryId);\r",
									"pm.environment.set('stateId', stateId);\r",
									"\r",
									"\r",
									"// Store the generated values in environment variables\r",
									"pm.environment.set('contactEmailId', contactEmailId);\r",
									"pm.environment.set('contactfname', contactfname);\r",
									"pm.environment.set('contactlname', contactlname);\r",
									"pm.environment.set('contactNumber', contactNumber);\r",
									"pm.environment.set('contactAddress', contactAddress);\r",
									"pm.environment.set('contactFavorite', contactFavorite);\r",
									"pm.environment.set('contactGender', contactGender);\r",
									"pm.environment.set('contactBirthDate', contactBirthDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.string;\r",
									"     pm.expect(responseData.success).to.have.eq(true);\r",
									"     pm.expect(responseData.message).to.include(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{contactfname}}\",\r\n  \"lastName\": \"{{contactlname}}\",\r\n  \"image\": \"\",\r\n  \"email\": \"{{contactEmailId}}\",\r\n  \"contactNumber\": \"{{contactNumber}}\",\r\n  \"address\": \"{{contactAddress}}\",\r\n  \"gender\": \"{{contactGender}}\",\r\n  \"favourite\": {{contactFavorite}},\r\n  \"countryId\": {{countryId}},\r\n  \"stateId\": {{stateId}},\r\n  \"imageByte\": \"\",\r\n  \"birthDate\": \"{{contactBirthDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Contact/Create"
					},
					"response": []
				},
				{
					"name": "Edit BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.string;\r",
									"     pm.expect(responseData.success).to.have.eq(false);\r",
									"     pm.expect(responseData.message).to.include(\"Contact Exists!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contactId\":{{contactId}},\r\n  \"firstName\": \"{{contactfname}}\",\r\n  \"lastName\": \"{{contactlname}}\",\r\n  \"image\": \"\",\r\n  \"email\": \"{{contactEmailId}}\",\r\n  \"contactNumber\": \"{{contactNumber}}\",\r\n  \"address\": \"{{contactAddress}}\",\r\n  \"gender\": \"{{contactGender}}\",\r\n  \"favourite\": {{contactFavorite}},\r\n  \"countryId\": {{countryId}},\r\n  \"stateId\": {{stateId}},\r\n  \"imageByte\": \"\",\r\n  \"birthDate\": \"{{contactBirthDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{API_URL}}Contact/Edit"
					},
					"response": []
				},
				{
					"name": "GetAllContacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.string;\r",
									"     pm.expect(responseData.success).to.have.eq(true);\r",
									"     pm.expect(responseData.message).to.include(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    responseData.data.forEach(item => {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.contactId).to.exist;\r",
									"        pm.expect(item.firstName).to.exist;\r",
									"          pm.expect(item.lastName).to.exist;\r",
									"        pm.expect(item.image).to.exist;\r",
									"         pm.expect(item.email).to.exist;\r",
									"        pm.expect(item.contactNumber).to.exist;\r",
									"          pm.expect(item.address).to.exist;\r",
									"        pm.expect(item.gender).to.exist;\r",
									"         pm.expect(item.favourite).to.exist;\r",
									"        pm.expect(item.countryId).to.exist;\r",
									"          pm.expect(item.stateId).to.exist;\r",
									"    });\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/GetAllContacts"
					},
					"response": []
				},
				{
					"name": "GetAllFavourite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.string;\r",
									"     pm.expect(responseData.success).to.have.eq(true);\r",
									"     pm.expect(responseData.message).to.include(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    responseData.data.forEach(item => {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.contactId).to.exist;\r",
									"        pm.expect(item.firstName).to.exist;\r",
									"          pm.expect(item.lastName).to.exist;\r",
									"        pm.expect(item.image).to.exist;\r",
									"         pm.expect(item.email).to.exist;\r",
									"        pm.expect(item.contactNumber).to.exist;\r",
									"          pm.expect(item.address).to.exist;\r",
									"        pm.expect(item.gender).to.exist;\r",
									"         pm.expect(item.favourite).to.exist;\r",
									"        pm.expect(item.countryId).to.exist;\r",
									"          pm.expect(item.stateId).to.exist;\r",
									"    });\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/GetAllFavourite"
					},
					"response": []
				},
				{
					"name": "CountContactBasedOnCountry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('number');\r",
									"    pm.expect(responseData.success).to.true;\r",
									"    pm.expect(responseData.message).to.include(\"Count\");\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/CountContactBasedOnCountry/{{countryId}}"
					},
					"response": []
				},
				{
					"name": "CountContactBasedOnGender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('number');\r",
									"    pm.expect(responseData.success).to.true;\r",
									"    pm.expect(responseData.message).to.include(\"Count\");\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/CountContactBasedOnGender/{{contactGender}}"
					},
					"response": []
				},
				{
					"name": "GetDetailByStateId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    responseData.data.forEach(item => {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.contactId).to.exist;\r",
									"        pm.expect(item.firstName).to.exist;\r",
									"          pm.expect(item.lastName).to.exist;\r",
									"        pm.expect(item.image).to.exist;\r",
									"         pm.expect(item.email).to.exist;\r",
									"        pm.expect(item.contactNumber).to.exist;\r",
									"          pm.expect(item.address).to.exist;\r",
									"        pm.expect(item.gender).to.exist;\r",
									"         pm.expect(item.favourite).to.exist;\r",
									"        pm.expect(item.countryName).to.exist;\r",
									"          pm.expect(item.stateName).to.exist;\r",
									"    });\r",
									"    pm.expect(responseData.success).to.true;\r",
									"    pm.expect(responseData.message).to.include(\"Success\");\r",
									"});\r",
									" \r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/GetDetailByStateId/{{stateId}}"
					},
					"response": []
				},
				{
					"name": "GetDetailByStateId BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"   \r",
									"    pm.expect(responseData.success).to.false;\r",
									"    pm.expect(responseData.message).to.be.include(\"No record found\");\r",
									"});\r",
									" \r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/GetDetailByStateId/0"
					},
					"response": []
				},
				{
					"name": "GetAllContactsByPagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    responseData.data.forEach(item => {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.contactId).to.exist;\r",
									"        pm.expect(item.firstName).to.exist;\r",
									"          pm.expect(item.lastName).to.exist;\r",
									"        pm.expect(item.image).to.exist;\r",
									"         pm.expect(item.email).to.exist;\r",
									"        pm.expect(item.contactNumber).to.exist;\r",
									"          pm.expect(item.address).to.exist;\r",
									"        pm.expect(item.gender).to.exist;\r",
									"         pm.expect(item.favourite).to.exist;\r",
									"        pm.expect(item.countryId).to.exist;\r",
									"          pm.expect(item.stateId).to.exist;\r",
									"    });\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}Contact/GetAllContactsByPagination/?letter={{letter}}&search={{search}}&page={{page}}&pageSize={{pageSize}}&sortOrder={{sortOrder}}",
							"host": [
								"{{API_URL}}Contact"
							],
							"path": [
								"GetAllContactsByPagination",
								""
							],
							"query": [
								{
									"key": "letter",
									"value": "{{letter}}"
								},
								{
									"key": "search",
									"value": "{{search}}"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "pageSize",
									"value": "{{pageSize}}"
								},
								{
									"key": "sortOrder",
									"value": "{{sortOrder}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllContactsByPagination BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    pm.expect(responseData.success).to.false;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}Contact/GetAllContactsByPagination/?letter=a&search={{search}}&page={{page}}&pageSize={{pageSize}}&sortOrder={{sortOrder}}",
							"host": [
								"{{API_URL}}Contact"
							],
							"path": [
								"GetAllContactsByPagination",
								""
							],
							"query": [
								{
									"key": "letter",
									"value": "a"
								},
								{
									"key": "search",
									"value": "{{search}}"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "pageSize",
									"value": "{{pageSize}}"
								},
								{
									"key": "sortOrder",
									"value": "{{sortOrder}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetContactsCount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('number');\r",
									"    pm.expect(responseData.success).to.true;\r",
									"    pm.expect(responseData.message).to.include(\"Paginated\");\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}Contact/GetContactsCount?letter={{letter}}&search={{search}}",
							"host": [
								"{{API_URL}}Contact"
							],
							"path": [
								"GetContactsCount"
							],
							"query": [
								{
									"key": "letter",
									"value": "{{letter}}"
								},
								{
									"key": "search",
									"value": "{{search}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPaginatedFavouriteContacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
									"    responseData.data.forEach(item => {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.contactId).to.exist;\r",
									"        pm.expect(item.firstName).to.exist;\r",
									"          pm.expect(item.lastName).to.exist;\r",
									"        pm.expect(item.image).to.exist;\r",
									"         pm.expect(item.email).to.exist;\r",
									"        pm.expect(item.contactNumber).to.exist;\r",
									"          pm.expect(item.address).to.exist;\r",
									"        pm.expect(item.gender).to.exist;\r",
									"         pm.expect(item.favourite).to.exist;\r",
									"        pm.expect(item.countryId).to.exist;\r",
									"          pm.expect(item.stateId).to.exist;\r",
									"    });\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}Contact/GetPaginatedFavouriteContacts?letter={{letter}}&page={{page}}&pageSize={{pageSize}}&sortOrder={{sortOrder}}",
							"host": [
								"{{API_URL}}Contact"
							],
							"path": [
								"GetPaginatedFavouriteContacts"
							],
							"query": [
								{
									"key": "letter",
									"value": "{{letter}}"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "pageSize",
									"value": "{{pageSize}}"
								},
								{
									"key": "sortOrder",
									"value": "{{sortOrder}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPaginatedFavouriteContacts BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    pm.expect(responseData.success).to.false;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}Contact/GetPaginatedFavouriteContacts/?letter=a&page={{page}}&pageSize={{pageSize}}&sortOrder={{sortOrder}}",
							"host": [
								"{{API_URL}}Contact"
							],
							"path": [
								"GetPaginatedFavouriteContacts",
								""
							],
							"query": [
								{
									"key": "letter",
									"value": "a"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "pageSize",
									"value": "{{pageSize}}"
								},
								{
									"key": "sortOrder",
									"value": "{{sortOrder}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TotalContactFavourite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('number');\r",
									"    pm.expect(responseData.success).to.true;\r",
									"    pm.expect(responseData.message).to.include(\"Paginated\");\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}Contact/TotalContactFavourite?letter={{letter}}",
							"host": [
								"{{API_URL}}Contact"
							],
							"path": [
								"TotalContactFavourite"
							],
							"query": [
								{
									"key": "letter",
									"value": "{{letter}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.string;\r",
									"     pm.expect(responseData.success).to.have.eq(true);\r",
									"     pm.expect(responseData.message).to.include(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/Delete/{{contactId}}"
					},
					"response": []
				},
				{
					"name": "Delete BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"pm.test(\"Response to check field - data, success, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.null;\r",
									"     pm.expect(responseData.success).to.have.eq(false);\r",
									"     pm.expect(responseData.message).to.include(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{API_URL}}Contact/Delete/{{contactId}}"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIzIiwidW5pcXVlX25hbWUiOiJ1c2VyNzA1MCIsIlVzZXJJZCI6IjMiLCJuYmYiOjE3MjUyNjc3ODUsImV4cCI6MTcyNTM1NDE4NSwiaWF0IjoxNzI1MjY3Nzg1fQ.Oa5wjFH5mfPCdl5P-tFOhwtZukBYBGOCq_vWm-XYTh4"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}